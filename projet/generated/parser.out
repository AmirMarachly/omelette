Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEEN
    EGAL
    GRAND
    NOMBRE
    PETIT
    PLUS
    RIEN
    SI
    SINON

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence
Rule 2     program -> sentence program
Rule 3     sentence -> subordinate .
Rule 4     sentence -> subordinate PUIS sentence
Rule 5     sentence -> subordinate , sentence
Rule 6     print -> AFFICHER expression
Rule 7     subordinate -> assign
Rule 8     subordinate -> print
Rule 9     assign -> LE TEXT ID VAUT expression
Rule 10    expression -> NUMBER
Rule 11    expression -> STRING
Rule 12    expression -> ID
Rule 13    sentence -> TANT QUE expression ALORS sentence
Rule 14    operator -> ADDITIONNE DE
Rule 15    operator -> SOUSTRAIT DE
Rule 16    operator -> MULTIPLIE PAR
Rule 17    operator -> DIVISE PAR
Rule 18    expression -> expression operator expression

Terminals, with rules where they appear

,                    : 5
.                    : 3
ADDITIONNE           : 14
AFFICHER             : 6
ALORS                : 13
BOOLEEN              : 
DE                   : 14 15
DIVISE               : 17
EGAL                 : 
GRAND                : 
ID                   : 9 12
LE                   : 9
MULTIPLIE            : 16
NOMBRE               : 
NUMBER               : 10
PAR                  : 16 17
PETIT                : 
PLUS                 : 
PUIS                 : 4
QUE                  : 13
RIEN                 : 
SI                   : 
SINON                : 
SOUSTRAIT            : 15
STRING               : 11
TANT                 : 13
TEXT                 : 9
VAUT                 : 9
error                : 

Nonterminals, with rules where they appear

assign               : 7
expression           : 6 9 13 18 18
operator             : 18
print                : 8
program              : 2 0
sentence             : 1 2 4 5 13
subordinate          : 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence
    (2) program -> . sentence program
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (13) sentence -> . TANT QUE expression ALORS sentence
    (7) subordinate -> . assign
    (8) subordinate -> . print
    (9) assign -> . LE TEXT ID VAUT expression
    (6) print -> . AFFICHER expression

    TANT            shift and go to state 4
    LE              shift and go to state 7
    AFFICHER        shift and go to state 8

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    subordinate                    shift and go to state 3
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence .
    (2) program -> sentence . program
    (1) program -> . sentence
    (2) program -> . sentence program
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (13) sentence -> . TANT QUE expression ALORS sentence
    (7) subordinate -> . assign
    (8) subordinate -> . print
    (9) assign -> . LE TEXT ID VAUT expression
    (6) print -> . AFFICHER expression

    $end            reduce using rule 1 (program -> sentence .)
    TANT            shift and go to state 4
    LE              shift and go to state 7
    AFFICHER        shift and go to state 8

    sentence                       shift and go to state 2
    program                        shift and go to state 9
    subordinate                    shift and go to state 3
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 3

    (3) sentence -> subordinate . .
    (4) sentence -> subordinate . PUIS sentence
    (5) sentence -> subordinate . , sentence

    .               shift and go to state 10
    PUIS            shift and go to state 11
    ,               shift and go to state 12


state 4

    (13) sentence -> TANT . QUE expression ALORS sentence

    QUE             shift and go to state 13


state 5

    (7) subordinate -> assign .

    .               reduce using rule 7 (subordinate -> assign .)
    PUIS            reduce using rule 7 (subordinate -> assign .)
    ,               reduce using rule 7 (subordinate -> assign .)


state 6

    (8) subordinate -> print .

    .               reduce using rule 8 (subordinate -> print .)
    PUIS            reduce using rule 8 (subordinate -> print .)
    ,               reduce using rule 8 (subordinate -> print .)


state 7

    (9) assign -> LE . TEXT ID VAUT expression

    TEXT            shift and go to state 14


state 8

    (6) print -> AFFICHER . expression
    (10) expression -> . NUMBER
    (11) expression -> . STRING
    (12) expression -> . ID
    (18) expression -> . expression operator expression

    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 15

state 9

    (2) program -> sentence program .

    $end            reduce using rule 2 (program -> sentence program .)


state 10

    (3) sentence -> subordinate . .

    TANT            reduce using rule 3 (sentence -> subordinate . .)
    LE              reduce using rule 3 (sentence -> subordinate . .)
    AFFICHER        reduce using rule 3 (sentence -> subordinate . .)
    $end            reduce using rule 3 (sentence -> subordinate . .)


state 11

    (4) sentence -> subordinate PUIS . sentence
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (13) sentence -> . TANT QUE expression ALORS sentence
    (7) subordinate -> . assign
    (8) subordinate -> . print
    (9) assign -> . LE TEXT ID VAUT expression
    (6) print -> . AFFICHER expression

    TANT            shift and go to state 4
    LE              shift and go to state 7
    AFFICHER        shift and go to state 8

    subordinate                    shift and go to state 3
    sentence                       shift and go to state 19
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 12

    (5) sentence -> subordinate , . sentence
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (13) sentence -> . TANT QUE expression ALORS sentence
    (7) subordinate -> . assign
    (8) subordinate -> . print
    (9) assign -> . LE TEXT ID VAUT expression
    (6) print -> . AFFICHER expression

    TANT            shift and go to state 4
    LE              shift and go to state 7
    AFFICHER        shift and go to state 8

    subordinate                    shift and go to state 3
    sentence                       shift and go to state 20
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 13

    (13) sentence -> TANT QUE . expression ALORS sentence
    (10) expression -> . NUMBER
    (11) expression -> . STRING
    (12) expression -> . ID
    (18) expression -> . expression operator expression

    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 21

state 14

    (9) assign -> LE TEXT . ID VAUT expression

    ID              shift and go to state 22


state 15

    (6) print -> AFFICHER expression .
    (18) expression -> expression . operator expression
    (14) operator -> . ADDITIONNE DE
    (15) operator -> . SOUSTRAIT DE
    (16) operator -> . MULTIPLIE PAR
    (17) operator -> . DIVISE PAR

    .               reduce using rule 6 (print -> AFFICHER expression .)
    PUIS            reduce using rule 6 (print -> AFFICHER expression .)
    ,               reduce using rule 6 (print -> AFFICHER expression .)
    ADDITIONNE      shift and go to state 24
    SOUSTRAIT       shift and go to state 25
    MULTIPLIE       shift and go to state 26
    DIVISE          shift and go to state 27

    operator                       shift and go to state 23

state 16

    (10) expression -> NUMBER .

    ADDITIONNE      reduce using rule 10 (expression -> NUMBER .)
    SOUSTRAIT       reduce using rule 10 (expression -> NUMBER .)
    MULTIPLIE       reduce using rule 10 (expression -> NUMBER .)
    DIVISE          reduce using rule 10 (expression -> NUMBER .)
    .               reduce using rule 10 (expression -> NUMBER .)
    PUIS            reduce using rule 10 (expression -> NUMBER .)
    ,               reduce using rule 10 (expression -> NUMBER .)
    ALORS           reduce using rule 10 (expression -> NUMBER .)


state 17

    (11) expression -> STRING .

    ADDITIONNE      reduce using rule 11 (expression -> STRING .)
    SOUSTRAIT       reduce using rule 11 (expression -> STRING .)
    MULTIPLIE       reduce using rule 11 (expression -> STRING .)
    DIVISE          reduce using rule 11 (expression -> STRING .)
    .               reduce using rule 11 (expression -> STRING .)
    PUIS            reduce using rule 11 (expression -> STRING .)
    ,               reduce using rule 11 (expression -> STRING .)
    ALORS           reduce using rule 11 (expression -> STRING .)


state 18

    (12) expression -> ID .

    ADDITIONNE      reduce using rule 12 (expression -> ID .)
    SOUSTRAIT       reduce using rule 12 (expression -> ID .)
    MULTIPLIE       reduce using rule 12 (expression -> ID .)
    DIVISE          reduce using rule 12 (expression -> ID .)
    .               reduce using rule 12 (expression -> ID .)
    PUIS            reduce using rule 12 (expression -> ID .)
    ,               reduce using rule 12 (expression -> ID .)
    ALORS           reduce using rule 12 (expression -> ID .)


state 19

    (4) sentence -> subordinate PUIS sentence .

    TANT            reduce using rule 4 (sentence -> subordinate PUIS sentence .)
    LE              reduce using rule 4 (sentence -> subordinate PUIS sentence .)
    AFFICHER        reduce using rule 4 (sentence -> subordinate PUIS sentence .)
    $end            reduce using rule 4 (sentence -> subordinate PUIS sentence .)


state 20

    (5) sentence -> subordinate , sentence .

    TANT            reduce using rule 5 (sentence -> subordinate , sentence .)
    LE              reduce using rule 5 (sentence -> subordinate , sentence .)
    AFFICHER        reduce using rule 5 (sentence -> subordinate , sentence .)
    $end            reduce using rule 5 (sentence -> subordinate , sentence .)


state 21

    (13) sentence -> TANT QUE expression . ALORS sentence
    (18) expression -> expression . operator expression
    (14) operator -> . ADDITIONNE DE
    (15) operator -> . SOUSTRAIT DE
    (16) operator -> . MULTIPLIE PAR
    (17) operator -> . DIVISE PAR

    ALORS           shift and go to state 28
    ADDITIONNE      shift and go to state 24
    SOUSTRAIT       shift and go to state 25
    MULTIPLIE       shift and go to state 26
    DIVISE          shift and go to state 27

    operator                       shift and go to state 23

state 22

    (9) assign -> LE TEXT ID . VAUT expression

    VAUT            shift and go to state 29


state 23

    (18) expression -> expression operator . expression
    (10) expression -> . NUMBER
    (11) expression -> . STRING
    (12) expression -> . ID
    (18) expression -> . expression operator expression

    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 30

state 24

    (14) operator -> ADDITIONNE . DE

    DE              shift and go to state 31


state 25

    (15) operator -> SOUSTRAIT . DE

    DE              shift and go to state 32


state 26

    (16) operator -> MULTIPLIE . PAR

    PAR             shift and go to state 33


state 27

    (17) operator -> DIVISE . PAR

    PAR             shift and go to state 34


state 28

    (13) sentence -> TANT QUE expression ALORS . sentence
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (13) sentence -> . TANT QUE expression ALORS sentence
    (7) subordinate -> . assign
    (8) subordinate -> . print
    (9) assign -> . LE TEXT ID VAUT expression
    (6) print -> . AFFICHER expression

    TANT            shift and go to state 4
    LE              shift and go to state 7
    AFFICHER        shift and go to state 8

    sentence                       shift and go to state 35
    subordinate                    shift and go to state 3
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 29

    (9) assign -> LE TEXT ID VAUT . expression
    (10) expression -> . NUMBER
    (11) expression -> . STRING
    (12) expression -> . ID
    (18) expression -> . expression operator expression

    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 36

state 30

    (18) expression -> expression operator expression .
    (18) expression -> expression . operator expression
    (14) operator -> . ADDITIONNE DE
    (15) operator -> . SOUSTRAIT DE
    (16) operator -> . MULTIPLIE PAR
    (17) operator -> . DIVISE PAR

    ADDITIONNE      reduce using rule 18 (expression -> expression operator expression .)
    SOUSTRAIT       reduce using rule 18 (expression -> expression operator expression .)
    MULTIPLIE       reduce using rule 18 (expression -> expression operator expression .)
    DIVISE          reduce using rule 18 (expression -> expression operator expression .)
    .               reduce using rule 18 (expression -> expression operator expression .)
    PUIS            reduce using rule 18 (expression -> expression operator expression .)
    ,               reduce using rule 18 (expression -> expression operator expression .)
    ALORS           reduce using rule 18 (expression -> expression operator expression .)

  ! ADDITIONNE      [ shift and go to state 24 ]
  ! SOUSTRAIT       [ shift and go to state 25 ]
  ! MULTIPLIE       [ shift and go to state 26 ]
  ! DIVISE          [ shift and go to state 27 ]

    operator                       shift and go to state 23

state 31

    (14) operator -> ADDITIONNE DE .

    NUMBER          reduce using rule 14 (operator -> ADDITIONNE DE .)
    STRING          reduce using rule 14 (operator -> ADDITIONNE DE .)
    ID              reduce using rule 14 (operator -> ADDITIONNE DE .)


state 32

    (15) operator -> SOUSTRAIT DE .

    NUMBER          reduce using rule 15 (operator -> SOUSTRAIT DE .)
    STRING          reduce using rule 15 (operator -> SOUSTRAIT DE .)
    ID              reduce using rule 15 (operator -> SOUSTRAIT DE .)


state 33

    (16) operator -> MULTIPLIE PAR .

    NUMBER          reduce using rule 16 (operator -> MULTIPLIE PAR .)
    STRING          reduce using rule 16 (operator -> MULTIPLIE PAR .)
    ID              reduce using rule 16 (operator -> MULTIPLIE PAR .)


state 34

    (17) operator -> DIVISE PAR .

    NUMBER          reduce using rule 17 (operator -> DIVISE PAR .)
    STRING          reduce using rule 17 (operator -> DIVISE PAR .)
    ID              reduce using rule 17 (operator -> DIVISE PAR .)


state 35

    (13) sentence -> TANT QUE expression ALORS sentence .

    TANT            reduce using rule 13 (sentence -> TANT QUE expression ALORS sentence .)
    LE              reduce using rule 13 (sentence -> TANT QUE expression ALORS sentence .)
    AFFICHER        reduce using rule 13 (sentence -> TANT QUE expression ALORS sentence .)
    $end            reduce using rule 13 (sentence -> TANT QUE expression ALORS sentence .)


state 36

    (9) assign -> LE TEXT ID VAUT expression .
    (18) expression -> expression . operator expression
    (14) operator -> . ADDITIONNE DE
    (15) operator -> . SOUSTRAIT DE
    (16) operator -> . MULTIPLIE PAR
    (17) operator -> . DIVISE PAR

    .               reduce using rule 9 (assign -> LE TEXT ID VAUT expression .)
    PUIS            reduce using rule 9 (assign -> LE TEXT ID VAUT expression .)
    ,               reduce using rule 9 (assign -> LE TEXT ID VAUT expression .)
    ADDITIONNE      shift and go to state 24
    SOUSTRAIT       shift and go to state 25
    MULTIPLIE       shift and go to state 26
    DIVISE          shift and go to state 27

    operator                       shift and go to state 23
