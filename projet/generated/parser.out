Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EGAL
    GRAND
    PETIT
    PLUS
    QUE
    RIEN

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence
Rule 2     program -> sentence program
Rule 3     sentence -> subordinate .
Rule 4     sentence -> subordinate PUIS sentence
Rule 5     sentence -> subordinate , sentence
Rule 6     sentence -> SI expression ALORS sentence SINON sentence
Rule 7     print -> AFFICHER expression
Rule 8     subordinate -> assign
Rule 9     subordinate -> print
Rule 10    assign -> ID VAUT expression
Rule 11    expression -> NUMBER
Rule 12    expression -> ID
Rule 13    operator -> ADDITIONNE DE
Rule 14    operator -> SOUSTRAIT DE
Rule 15    operator -> MULTIPLIE PAR
Rule 16    operator -> DIVISE PAR
Rule 17    expression -> expression operator expression

Terminals, with rules where they appear

,                    : 5
.                    : 3
ADDITIONNE           : 13
AFFICHER             : 7
ALORS                : 6
DE                   : 13 14
DIVISE               : 16
EGAL                 : 
GRAND                : 
ID                   : 10 12
MULTIPLIE            : 15
NUMBER               : 11
PAR                  : 15 16
PETIT                : 
PLUS                 : 
PUIS                 : 4
QUE                  : 
RIEN                 : 
SI                   : 6
SINON                : 6
SOUSTRAIT            : 14
VAUT                 : 10
error                : 

Nonterminals, with rules where they appear

assign               : 8
expression           : 6 7 10 17 17
operator             : 17
print                : 9
program              : 2 0
sentence             : 1 2 4 5 6 6
subordinate          : 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence
    (2) program -> . sentence program
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (6) sentence -> . SI expression ALORS sentence SINON sentence
    (8) subordinate -> . assign
    (9) subordinate -> . print
    (10) assign -> . ID VAUT expression
    (7) print -> . AFFICHER expression

    SI              shift and go to state 4
    ID              shift and go to state 7
    AFFICHER        shift and go to state 8

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    subordinate                    shift and go to state 3
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence .
    (2) program -> sentence . program
    (1) program -> . sentence
    (2) program -> . sentence program
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (6) sentence -> . SI expression ALORS sentence SINON sentence
    (8) subordinate -> . assign
    (9) subordinate -> . print
    (10) assign -> . ID VAUT expression
    (7) print -> . AFFICHER expression

    $end            reduce using rule 1 (program -> sentence .)
    SI              shift and go to state 4
    ID              shift and go to state 7
    AFFICHER        shift and go to state 8

    sentence                       shift and go to state 2
    program                        shift and go to state 9
    subordinate                    shift and go to state 3
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 3

    (3) sentence -> subordinate . .
    (4) sentence -> subordinate . PUIS sentence
    (5) sentence -> subordinate . , sentence

    .               shift and go to state 10
    PUIS            shift and go to state 11
    ,               shift and go to state 12


state 4

    (6) sentence -> SI . expression ALORS sentence SINON sentence
    (11) expression -> . NUMBER
    (12) expression -> . ID
    (17) expression -> . expression operator expression

    NUMBER          shift and go to state 14
    ID              shift and go to state 15

    expression                     shift and go to state 13

state 5

    (8) subordinate -> assign .

    .               reduce using rule 8 (subordinate -> assign .)
    PUIS            reduce using rule 8 (subordinate -> assign .)
    ,               reduce using rule 8 (subordinate -> assign .)


state 6

    (9) subordinate -> print .

    .               reduce using rule 9 (subordinate -> print .)
    PUIS            reduce using rule 9 (subordinate -> print .)
    ,               reduce using rule 9 (subordinate -> print .)


state 7

    (10) assign -> ID . VAUT expression

    VAUT            shift and go to state 16


state 8

    (7) print -> AFFICHER . expression
    (11) expression -> . NUMBER
    (12) expression -> . ID
    (17) expression -> . expression operator expression

    NUMBER          shift and go to state 14
    ID              shift and go to state 15

    expression                     shift and go to state 17

state 9

    (2) program -> sentence program .

    $end            reduce using rule 2 (program -> sentence program .)


state 10

    (3) sentence -> subordinate . .

    SI              reduce using rule 3 (sentence -> subordinate . .)
    ID              reduce using rule 3 (sentence -> subordinate . .)
    AFFICHER        reduce using rule 3 (sentence -> subordinate . .)
    $end            reduce using rule 3 (sentence -> subordinate . .)
    SINON           reduce using rule 3 (sentence -> subordinate . .)


state 11

    (4) sentence -> subordinate PUIS . sentence
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (6) sentence -> . SI expression ALORS sentence SINON sentence
    (8) subordinate -> . assign
    (9) subordinate -> . print
    (10) assign -> . ID VAUT expression
    (7) print -> . AFFICHER expression

    SI              shift and go to state 4
    ID              shift and go to state 7
    AFFICHER        shift and go to state 8

    subordinate                    shift and go to state 3
    sentence                       shift and go to state 18
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 12

    (5) sentence -> subordinate , . sentence
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (6) sentence -> . SI expression ALORS sentence SINON sentence
    (8) subordinate -> . assign
    (9) subordinate -> . print
    (10) assign -> . ID VAUT expression
    (7) print -> . AFFICHER expression

    SI              shift and go to state 4
    ID              shift and go to state 7
    AFFICHER        shift and go to state 8

    subordinate                    shift and go to state 3
    sentence                       shift and go to state 19
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 13

    (6) sentence -> SI expression . ALORS sentence SINON sentence
    (17) expression -> expression . operator expression
    (13) operator -> . ADDITIONNE DE
    (14) operator -> . SOUSTRAIT DE
    (15) operator -> . MULTIPLIE PAR
    (16) operator -> . DIVISE PAR

    ALORS           shift and go to state 20
    ADDITIONNE      shift and go to state 22
    SOUSTRAIT       shift and go to state 23
    MULTIPLIE       shift and go to state 24
    DIVISE          shift and go to state 25

    operator                       shift and go to state 21

state 14

    (11) expression -> NUMBER .

    ALORS           reduce using rule 11 (expression -> NUMBER .)
    ADDITIONNE      reduce using rule 11 (expression -> NUMBER .)
    SOUSTRAIT       reduce using rule 11 (expression -> NUMBER .)
    MULTIPLIE       reduce using rule 11 (expression -> NUMBER .)
    DIVISE          reduce using rule 11 (expression -> NUMBER .)
    .               reduce using rule 11 (expression -> NUMBER .)
    PUIS            reduce using rule 11 (expression -> NUMBER .)
    ,               reduce using rule 11 (expression -> NUMBER .)


state 15

    (12) expression -> ID .

    ALORS           reduce using rule 12 (expression -> ID .)
    ADDITIONNE      reduce using rule 12 (expression -> ID .)
    SOUSTRAIT       reduce using rule 12 (expression -> ID .)
    MULTIPLIE       reduce using rule 12 (expression -> ID .)
    DIVISE          reduce using rule 12 (expression -> ID .)
    .               reduce using rule 12 (expression -> ID .)
    PUIS            reduce using rule 12 (expression -> ID .)
    ,               reduce using rule 12 (expression -> ID .)


state 16

    (10) assign -> ID VAUT . expression
    (11) expression -> . NUMBER
    (12) expression -> . ID
    (17) expression -> . expression operator expression

    NUMBER          shift and go to state 14
    ID              shift and go to state 15

    expression                     shift and go to state 26

state 17

    (7) print -> AFFICHER expression .
    (17) expression -> expression . operator expression
    (13) operator -> . ADDITIONNE DE
    (14) operator -> . SOUSTRAIT DE
    (15) operator -> . MULTIPLIE PAR
    (16) operator -> . DIVISE PAR

    .               reduce using rule 7 (print -> AFFICHER expression .)
    PUIS            reduce using rule 7 (print -> AFFICHER expression .)
    ,               reduce using rule 7 (print -> AFFICHER expression .)
    ADDITIONNE      shift and go to state 22
    SOUSTRAIT       shift and go to state 23
    MULTIPLIE       shift and go to state 24
    DIVISE          shift and go to state 25

    operator                       shift and go to state 21

state 18

    (4) sentence -> subordinate PUIS sentence .

    SI              reduce using rule 4 (sentence -> subordinate PUIS sentence .)
    ID              reduce using rule 4 (sentence -> subordinate PUIS sentence .)
    AFFICHER        reduce using rule 4 (sentence -> subordinate PUIS sentence .)
    $end            reduce using rule 4 (sentence -> subordinate PUIS sentence .)
    SINON           reduce using rule 4 (sentence -> subordinate PUIS sentence .)


state 19

    (5) sentence -> subordinate , sentence .

    SI              reduce using rule 5 (sentence -> subordinate , sentence .)
    ID              reduce using rule 5 (sentence -> subordinate , sentence .)
    AFFICHER        reduce using rule 5 (sentence -> subordinate , sentence .)
    $end            reduce using rule 5 (sentence -> subordinate , sentence .)
    SINON           reduce using rule 5 (sentence -> subordinate , sentence .)


state 20

    (6) sentence -> SI expression ALORS . sentence SINON sentence
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (6) sentence -> . SI expression ALORS sentence SINON sentence
    (8) subordinate -> . assign
    (9) subordinate -> . print
    (10) assign -> . ID VAUT expression
    (7) print -> . AFFICHER expression

    SI              shift and go to state 4
    ID              shift and go to state 7
    AFFICHER        shift and go to state 8

    sentence                       shift and go to state 27
    subordinate                    shift and go to state 3
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 21

    (17) expression -> expression operator . expression
    (11) expression -> . NUMBER
    (12) expression -> . ID
    (17) expression -> . expression operator expression

    NUMBER          shift and go to state 14
    ID              shift and go to state 15

    expression                     shift and go to state 28

state 22

    (13) operator -> ADDITIONNE . DE

    DE              shift and go to state 29


state 23

    (14) operator -> SOUSTRAIT . DE

    DE              shift and go to state 30


state 24

    (15) operator -> MULTIPLIE . PAR

    PAR             shift and go to state 31


state 25

    (16) operator -> DIVISE . PAR

    PAR             shift and go to state 32


state 26

    (10) assign -> ID VAUT expression .
    (17) expression -> expression . operator expression
    (13) operator -> . ADDITIONNE DE
    (14) operator -> . SOUSTRAIT DE
    (15) operator -> . MULTIPLIE PAR
    (16) operator -> . DIVISE PAR

    .               reduce using rule 10 (assign -> ID VAUT expression .)
    PUIS            reduce using rule 10 (assign -> ID VAUT expression .)
    ,               reduce using rule 10 (assign -> ID VAUT expression .)
    ADDITIONNE      shift and go to state 22
    SOUSTRAIT       shift and go to state 23
    MULTIPLIE       shift and go to state 24
    DIVISE          shift and go to state 25

    operator                       shift and go to state 21

state 27

    (6) sentence -> SI expression ALORS sentence . SINON sentence

    SINON           shift and go to state 33


state 28

    (17) expression -> expression operator expression .
    (17) expression -> expression . operator expression
    (13) operator -> . ADDITIONNE DE
    (14) operator -> . SOUSTRAIT DE
    (15) operator -> . MULTIPLIE PAR
    (16) operator -> . DIVISE PAR

    ALORS           reduce using rule 17 (expression -> expression operator expression .)
    ADDITIONNE      reduce using rule 17 (expression -> expression operator expression .)
    SOUSTRAIT       reduce using rule 17 (expression -> expression operator expression .)
    MULTIPLIE       reduce using rule 17 (expression -> expression operator expression .)
    DIVISE          reduce using rule 17 (expression -> expression operator expression .)
    .               reduce using rule 17 (expression -> expression operator expression .)
    PUIS            reduce using rule 17 (expression -> expression operator expression .)
    ,               reduce using rule 17 (expression -> expression operator expression .)

  ! ADDITIONNE      [ shift and go to state 22 ]
  ! SOUSTRAIT       [ shift and go to state 23 ]
  ! MULTIPLIE       [ shift and go to state 24 ]
  ! DIVISE          [ shift and go to state 25 ]

    operator                       shift and go to state 21

state 29

    (13) operator -> ADDITIONNE DE .

    NUMBER          reduce using rule 13 (operator -> ADDITIONNE DE .)
    ID              reduce using rule 13 (operator -> ADDITIONNE DE .)


state 30

    (14) operator -> SOUSTRAIT DE .

    NUMBER          reduce using rule 14 (operator -> SOUSTRAIT DE .)
    ID              reduce using rule 14 (operator -> SOUSTRAIT DE .)


state 31

    (15) operator -> MULTIPLIE PAR .

    NUMBER          reduce using rule 15 (operator -> MULTIPLIE PAR .)
    ID              reduce using rule 15 (operator -> MULTIPLIE PAR .)


state 32

    (16) operator -> DIVISE PAR .

    NUMBER          reduce using rule 16 (operator -> DIVISE PAR .)
    ID              reduce using rule 16 (operator -> DIVISE PAR .)


state 33

    (6) sentence -> SI expression ALORS sentence SINON . sentence
    (3) sentence -> . subordinate .
    (4) sentence -> . subordinate PUIS sentence
    (5) sentence -> . subordinate , sentence
    (6) sentence -> . SI expression ALORS sentence SINON sentence
    (8) subordinate -> . assign
    (9) subordinate -> . print
    (10) assign -> . ID VAUT expression
    (7) print -> . AFFICHER expression

    SI              shift and go to state 4
    ID              shift and go to state 7
    AFFICHER        shift and go to state 8

    sentence                       shift and go to state 34
    subordinate                    shift and go to state 3
    assign                         shift and go to state 5
    print                          shift and go to state 6

state 34

    (6) sentence -> SI expression ALORS sentence SINON sentence .

    SI              reduce using rule 6 (sentence -> SI expression ALORS sentence SINON sentence .)
    ID              reduce using rule 6 (sentence -> SI expression ALORS sentence SINON sentence .)
    AFFICHER        reduce using rule 6 (sentence -> SI expression ALORS sentence SINON sentence .)
    $end            reduce using rule 6 (sentence -> SI expression ALORS sentence SINON sentence .)
    SINON           reduce using rule 6 (sentence -> SI expression ALORS sentence SINON sentence .)

