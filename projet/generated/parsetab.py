
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOPleftIDleftVAUTleftSIA ADDITIONNE AFFICHER ALORS BOOLEEN DE DIVISE EGAL EST FAUX GRAND ID LE MOINS MULTIPLIE NOMBRE NUMBER OU PAR PETIT PLUS PUIS QUE RIEN SI SINON SOUSTRAIT STRING TANT TEXT VAUT VRAIprogram : sentenceprogram : sentence programsentence : subordinate "."sentence : subordinate PUIS sentence\n        | subordinate "," sentenceprint : AFFICHER expressionsubordinate : assign\n        | printtype : NOMBRE\n        | TEXT\n        | BOOLEENassign : LE type ID VAUT expressionexpression : NUMBERexpression : STRINGexpression : VRAI\n        | FAUXexpression : IDsentence : TANT QUE expression ALORS sentencesentence : SI expression ALORS sentence SINON sentenceoperator : ADDITIONNE DE %prec OP\n        | SOUSTRAIT DE %prec OP\n        | MULTIPLIE PAR %prec OP\n        | DIVISE PAR %prec OPoperator : EST PLUS GRAND QUE\n    | EST PLUS PETIT QUE\n    | EST EGAL Aoperator : EST PLUS GRAND QUE OU EGAL\n    | EST PLUS PETIT QUE OU EGAL\n    | EST MOINS GRAND QUE OU EGAL\n    | EST MOINS PETIT QUE OU EGALsentence : RIEN "." expression : expression operator expression %prec OP'
    
_lr_action_items = {'TANT':([0,2,12,13,14,22,28,29,31,39,50,51,58,],[4,4,-3,4,4,-31,-4,-5,4,4,-18,4,-19,]),'SI':([0,2,12,13,14,22,28,29,31,39,50,51,58,],[5,5,-3,5,5,-31,-4,-5,5,5,-18,5,-19,]),'RIEN':([0,2,12,13,14,22,28,29,31,39,50,51,58,],[6,6,-3,6,6,-31,-4,-5,6,6,-18,6,-19,]),'LE':([0,2,12,13,14,22,28,29,31,39,50,51,58,],[9,9,-3,9,9,-31,-4,-5,9,9,-18,9,-19,]),'AFFICHER':([0,2,12,13,14,22,28,29,31,39,50,51,58,],[10,10,-3,10,10,-31,-4,-5,10,10,-18,10,-19,]),'$end':([1,2,11,12,22,28,29,50,58,],[0,-1,-2,-3,-31,-4,-5,-18,-19,]),'.':([3,6,7,8,17,18,19,20,21,27,41,57,],[12,22,-7,-8,-13,-14,-15,-16,-17,-6,-32,-12,]),'PUIS':([3,7,8,17,18,19,20,21,27,41,57,],[13,-7,-8,-13,-14,-15,-16,-17,-6,-32,-12,]),',':([3,7,8,17,18,19,20,21,27,41,57,],[14,-7,-8,-13,-14,-15,-16,-17,-6,-32,-12,]),'QUE':([4,52,53,55,56,],[15,59,60,61,62,]),'NUMBER':([5,10,15,32,42,43,44,45,49,54,59,60,67,68,69,70,],[17,17,17,17,-20,-21,-22,-23,17,-26,-24,-25,-27,-28,-29,-30,]),'STRING':([5,10,15,32,42,43,44,45,49,54,59,60,67,68,69,70,],[18,18,18,18,-20,-21,-22,-23,18,-26,-24,-25,-27,-28,-29,-30,]),'VRAI':([5,10,15,32,42,43,44,45,49,54,59,60,67,68,69,70,],[19,19,19,19,-20,-21,-22,-23,19,-26,-24,-25,-27,-28,-29,-30,]),'FAUX':([5,10,15,32,42,43,44,45,49,54,59,60,67,68,69,70,],[20,20,20,20,-20,-21,-22,-23,20,-26,-24,-25,-27,-28,-29,-30,]),'ID':([5,10,15,23,24,25,26,32,42,43,44,45,49,54,59,60,67,68,69,70,],[21,21,21,38,-9,-10,-11,21,-20,-21,-22,-23,21,-26,-24,-25,-27,-28,-29,-30,]),'NOMBRE':([9,],[24,]),'TEXT':([9,],[25,]),'BOOLEEN':([9,],[26,]),'SINON':([12,22,28,29,40,50,58,],[-3,-31,-4,-5,51,-18,-19,]),'ALORS':([16,17,18,19,20,21,30,41,],[31,-13,-14,-15,-16,-17,39,-32,]),'ADDITIONNE':([16,17,18,19,20,21,27,30,41,57,],[33,-13,-14,-15,-16,-17,33,33,-32,33,]),'SOUSTRAIT':([16,17,18,19,20,21,27,30,41,57,],[34,-13,-14,-15,-16,-17,34,34,-32,34,]),'MULTIPLIE':([16,17,18,19,20,21,27,30,41,57,],[35,-13,-14,-15,-16,-17,35,35,-32,35,]),'DIVISE':([16,17,18,19,20,21,27,30,41,57,],[36,-13,-14,-15,-16,-17,36,36,-32,36,]),'EST':([16,17,18,19,20,21,27,30,41,57,],[37,-13,-14,-15,-16,-17,37,37,-32,37,]),'DE':([33,34,],[42,43,]),'PAR':([35,36,],[44,45,]),'PLUS':([37,],[46,]),'EGAL':([37,63,64,65,66,],[47,67,68,69,70,]),'MOINS':([37,],[48,]),'VAUT':([38,],[49,]),'GRAND':([46,48,],[52,55,]),'PETIT':([46,48,],[53,56,]),'A':([47,],[54,]),'OU':([59,60,61,62,],[63,64,65,66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,11,]),'sentence':([0,2,13,14,31,39,51,],[2,2,28,29,40,50,58,]),'subordinate':([0,2,13,14,31,39,51,],[3,3,3,3,3,3,3,]),'assign':([0,2,13,14,31,39,51,],[7,7,7,7,7,7,7,]),'print':([0,2,13,14,31,39,51,],[8,8,8,8,8,8,8,]),'expression':([5,10,15,32,49,],[16,27,30,41,57,]),'type':([9,],[23,]),'operator':([16,27,30,41,57,],[32,32,32,32,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence','program',1,'p_program_sentence','parser5.py',28),
  ('program -> sentence program','program',2,'p_program_recursive','parser5.py',33),
  ('sentence -> subordinate .','sentence',2,'p_sentence_subordinate','parser5.py',38),
  ('sentence -> subordinate PUIS sentence','sentence',3,'p_sentence_recursive','parser5.py',43),
  ('sentence -> subordinate , sentence','sentence',3,'p_sentence_recursive','parser5.py',44),
  ('print -> AFFICHER expression','print',2,'p_print','parser5.py',49),
  ('subordinate -> assign','subordinate',1,'p_subordinate_assign','parser5.py',54),
  ('subordinate -> print','subordinate',1,'p_subordinate_assign','parser5.py',55),
  ('type -> NOMBRE','type',1,'p_type','parser5.py',59),
  ('type -> TEXT','type',1,'p_type','parser5.py',60),
  ('type -> BOOLEEN','type',1,'p_type','parser5.py',61),
  ('assign -> LE type ID VAUT expression','assign',5,'p_assign','parser5.py',65),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser5.py',70),
  ('expression -> STRING','expression',1,'p_expression_str','parser5.py',74),
  ('expression -> VRAI','expression',1,'p_expression_bool','parser5.py',78),
  ('expression -> FAUX','expression',1,'p_expression_bool','parser5.py',79),
  ('expression -> ID','expression',1,'p_expression_id','parser5.py',83),
  ('sentence -> TANT QUE expression ALORS sentence','sentence',5,'p_sentence_while','parser5.py',88),
  ('sentence -> SI expression ALORS sentence SINON sentence','sentence',6,'p_sentence_compare','parser5.py',93),
  ('operator -> ADDITIONNE DE','operator',2,'p_operator','parser5.py',98),
  ('operator -> SOUSTRAIT DE','operator',2,'p_operator','parser5.py',99),
  ('operator -> MULTIPLIE PAR','operator',2,'p_operator','parser5.py',100),
  ('operator -> DIVISE PAR','operator',2,'p_operator','parser5.py',101),
  ('operator -> EST PLUS GRAND QUE','operator',4,'p_operator_comparator','parser5.py',106),
  ('operator -> EST PLUS PETIT QUE','operator',4,'p_operator_comparator','parser5.py',107),
  ('operator -> EST EGAL A','operator',3,'p_operator_comparator','parser5.py',108),
  ('operator -> EST PLUS GRAND QUE OU EGAL','operator',6,'p_operator_comparator_equal','parser5.py',113),
  ('operator -> EST PLUS PETIT QUE OU EGAL','operator',6,'p_operator_comparator_equal','parser5.py',114),
  ('operator -> EST MOINS GRAND QUE OU EGAL','operator',6,'p_operator_comparator_equal','parser5.py',115),
  ('operator -> EST MOINS PETIT QUE OU EGAL','operator',6,'p_operator_comparator_equal','parser5.py',116),
  ('sentence -> RIEN .','sentence',2,'p_sentence_nothing','parser5.py',121),
  ('expression -> expression operator expression','expression',3,'p_expression_op','parser5.py',126),
]
