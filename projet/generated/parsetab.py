
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOPleftIDleftVAUTADDITIONNE AFFICHER ALORS BOOLEEN DE DIVISE EGAL GRAND ID LE MULTIPLIE NOMBRE NUMBER PAR PETIT PLUS PUIS QUE RIEN SI SINON SOUSTRAIT STRING TANT TEXT VAUTprogram : sentenceprogram : sentence programsentence : subordinate "."sentence : subordinate PUIS sentence\n        | subordinate "," sentenceprint : AFFICHER expressionsubordinate : assign\n        | printtype : NOMBRE\n        | TEXT\n        | BOOLEENassign : LE type ID VAUT expressionexpression : NUMBERexpression : STRINGexpression : IDsentence : TANT QUE expression ALORS sentenceoperator : ADDITIONNE DE %prec OP\n        | SOUSTRAIT DE %prec OP\n        | MULTIPLIE PAR %prec OP\n        | DIVISE PAR %prec OPexpression : expression operator expression %prec OP'
    
_lr_action_items = {'TANT':([0,2,10,11,12,22,23,31,38,],[4,4,-3,4,4,-4,-5,4,-16,]),'LE':([0,2,10,11,12,22,23,31,38,],[7,7,-3,7,7,-4,-5,7,-16,]),'AFFICHER':([0,2,10,11,12,22,23,31,38,],[8,8,-3,8,8,-4,-5,8,-16,]),'$end':([1,2,9,10,22,23,38,],[0,-1,-2,-3,-4,-5,-16,]),'.':([3,5,6,18,19,20,21,33,39,],[10,-7,-8,-6,-13,-14,-15,-21,-12,]),'PUIS':([3,5,6,18,19,20,21,33,39,],[11,-7,-8,-6,-13,-14,-15,-21,-12,]),',':([3,5,6,18,19,20,21,33,39,],[12,-7,-8,-6,-13,-14,-15,-21,-12,]),'QUE':([4,],[13,]),'NOMBRE':([7,],[15,]),'TEXT':([7,],[16,]),'BOOLEEN':([7,],[17,]),'NUMBER':([8,13,26,32,34,35,36,37,],[19,19,19,19,-17,-18,-19,-20,]),'STRING':([8,13,26,32,34,35,36,37,],[20,20,20,20,-17,-18,-19,-20,]),'ID':([8,13,14,15,16,17,26,32,34,35,36,37,],[21,21,25,-9,-10,-11,21,21,-17,-18,-19,-20,]),'ADDITIONNE':([18,19,20,21,24,33,39,],[27,-13,-14,-15,27,-21,27,]),'SOUSTRAIT':([18,19,20,21,24,33,39,],[28,-13,-14,-15,28,-21,28,]),'MULTIPLIE':([18,19,20,21,24,33,39,],[29,-13,-14,-15,29,-21,29,]),'DIVISE':([18,19,20,21,24,33,39,],[30,-13,-14,-15,30,-21,30,]),'ALORS':([19,20,21,24,33,],[-13,-14,-15,31,-21,]),'VAUT':([25,],[32,]),'DE':([27,28,],[34,35,]),'PAR':([29,30,],[36,37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,9,]),'sentence':([0,2,11,12,31,],[2,2,22,23,38,]),'subordinate':([0,2,11,12,31,],[3,3,3,3,3,]),'assign':([0,2,11,12,31,],[5,5,5,5,5,]),'print':([0,2,11,12,31,],[6,6,6,6,6,]),'type':([7,],[14,]),'expression':([8,13,26,32,],[18,24,33,39,]),'operator':([18,24,33,39,],[26,26,26,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence','program',1,'p_program_sentence','parser5.py',19),
  ('program -> sentence program','program',2,'p_program_recursive','parser5.py',23),
  ('sentence -> subordinate .','sentence',2,'p_sentence_subordinate','parser5.py',27),
  ('sentence -> subordinate PUIS sentence','sentence',3,'p_sentence_recursive','parser5.py',31),
  ('sentence -> subordinate , sentence','sentence',3,'p_sentence_recursive','parser5.py',32),
  ('print -> AFFICHER expression','print',2,'p_print','parser5.py',36),
  ('subordinate -> assign','subordinate',1,'p_subordinate_assign','parser5.py',40),
  ('subordinate -> print','subordinate',1,'p_subordinate_assign','parser5.py',41),
  ('type -> NOMBRE','type',1,'p_type','parser5.py',45),
  ('type -> TEXT','type',1,'p_type','parser5.py',46),
  ('type -> BOOLEEN','type',1,'p_type','parser5.py',47),
  ('assign -> LE type ID VAUT expression','assign',5,'p_assign','parser5.py',51),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser5.py',55),
  ('expression -> STRING','expression',1,'p_expression_str','parser5.py',59),
  ('expression -> ID','expression',1,'p_expression_id','parser5.py',63),
  ('sentence -> TANT QUE expression ALORS sentence','sentence',5,'p_sentence_while','parser5.py',67),
  ('operator -> ADDITIONNE DE','operator',2,'p_operator','parser5.py',71),
  ('operator -> SOUSTRAIT DE','operator',2,'p_operator','parser5.py',72),
  ('operator -> MULTIPLIE PAR','operator',2,'p_operator','parser5.py',73),
  ('operator -> DIVISE PAR','operator',2,'p_operator','parser5.py',74),
  ('expression -> expression operator expression','expression',3,'p_expression_op','parser5.py',78),
]
